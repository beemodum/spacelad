//note, when pasting this into visual studio, remember to install the allegro pack from NuGet

#include <iostream>
#include <String>
#include <allegro5/allegro.h>
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_ttf.h>
#include <thread>   
#include <windows.h>

using namespace std;

void bmpFollowMouseUpdate(ALLEGRO_BITMAP* bmp, int factor);
void bmpFollowMouseUpdate(ALLEGRO_BITMAP* bmp, int factor, int xoffset, int yoffset);
void bitmapText(ALLEGRO_BITMAP* bmp, string text);
void giveResource();

int width = 1920, height = 1080;
int mousex, mousey;

int timer = 0;

int iron = 0, ironPS = 5;
int copper = 0, copperPS = 0;

int main() {

    al_init();
    al_init_font_addon();
    al_init_ttf_addon();
    al_init_image_addon();
    al_install_mouse();

    int midwidth = width / 2, midheight = height / 2;

    bool gameState = true;
    
    thread resourceThread(giveResource);

    al_set_new_display_flags(ALLEGRO_FULLSCREEN);
    ALLEGRO_FONT* bahnschrift = al_load_ttf_font("bahnschrift.ttf", 64, 0);
    ALLEGRO_DISPLAY* display = al_create_display(width, height);
    ALLEGRO_EVENT_QUEUE* queue = al_create_event_queue();
    ALLEGRO_TIMER* timer60 = al_create_timer(1.0 / 60);
    al_start_timer(timer60);
    al_set_new_display_flags(ALLEGRO_FULLSCREEN);

    ALLEGRO_BITMAP* back = NULL;                                                                        //Background image
    back = al_load_bitmap("1080star2.png");
    assert(back != NULL);

    ALLEGRO_BITMAP* mid = NULL;                                                                         //Middle stars
    mid = al_load_bitmap("1080star1.png");
    assert(mid != NULL);
    al_convert_mask_to_alpha(mid, al_map_rgb(0, 0, 0));

    ALLEGRO_BITMAP* front = NULL;                                                                       //Front stars
    front = al_load_bitmap("1080star3.png");
    assert(front != NULL);
    al_convert_mask_to_alpha(front, al_map_rgb(0, 0, 0));

    ALLEGRO_BITMAP* planet1 = NULL;
    planet1 = al_load_bitmap("planet1.png");
    assert(planet1 != NULL);
    al_convert_mask_to_alpha(planet1, al_map_rgb(0, 0, 0));

    al_register_event_source(queue, al_get_timer_event_source(timer60));
    al_register_event_source(queue, al_get_mouse_event_source());
      

    while (true) {                                                                                      //Main loop

        ALLEGRO_EVENT event;
        al_wait_for_event(queue, &event);

        if (event.type == ALLEGRO_EVENT_MOUSE_AXES) {
            mousex = event.mouse.x;
            mousey = event.mouse.y;
        }

        if (event.type == ALLEGRO_EVENT_TIMER) {
            al_draw_bitmap(back, 0, 0, 0);
            bmpFollowMouseUpdate(mid, 128);
            bmpFollowMouseUpdate(front, 64);
            bmpFollowMouseUpdate(planet1, 96, (width/2) - (al_get_bitmap_width(planet1)/2), (height/2) - (al_get_bitmap_height(planet1)/2));
            al_draw_text(bahnschrift, al_map_rgb(255, 180, 0), 500, 500, 0, "text");

            al_flip_display();

            if (timer == 60) {
                iron += 5;
                cout << iron << endl;
                timer = 0;
            }
            timer++;

        }

        
    }
    al_destroy_event_queue(queue);
    al_destroy_font(bahnschrift);
    al_destroy_bitmap(front);
    al_destroy_bitmap(mid);
    al_destroy_bitmap(back);
    al_destroy_display(display);
    return 0;
}

void bmpFollowMouseUpdate(ALLEGRO_BITMAP* bmp, int factor) {                                            //Draws bitmap to follow the mouse
    int tempx;
    int tempy;

    tempx = ((mousex + (width / 2))) / factor;                                                          //Smaller factor gives greater range
    tempy = ((mousey + (height / 2))) / factor;
    tempx -= (width / factor);
    tempy -= (height / factor);
    al_draw_bitmap(bmp, tempx, tempy, 0);
}

void bmpFollowMouseUpdate(ALLEGRO_BITMAP* bmp, int factor, int xoffset, int yoffset) {                  //Overloaded function, allows for image offset
    int tempx;
    int tempy;

    tempx = ((mousex + (width / 2))) / factor;                                                          //Smaller factor gives greater range
    tempy = ((mousey + (height / 2))) / factor;
    tempx -= (width / factor);
    tempy -= (height / factor); 
    tempx += xoffset;                                                                                   //Adds X offset
    tempy += yoffset;                                                                                   //Adss Y offset
    al_draw_bitmap(bmp, tempx, tempy, 0);
}

void bitmapText(ALLEGRO_BITMAP* bmp, string text) {
    int textX = al_get_bitmap_width(bmp) / 2;
    int textY = al_get_bitmap_height(bmp) / 2;

    cout << "thread started" << endl;

}

void giveResource() {

    while (true) {
        iron += ironPS;
        copper += copperPS;
        Sleep(1000);
    }
}
